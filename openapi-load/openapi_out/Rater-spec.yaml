openapi: 3.0.1
info:
  title: Rater API
  description: A Rater in simple terms is a microservice that is designed to receive
    Events from various sources and produce DRs (Detailed Records) that represents
    the charges produced by the engine.
  version: 1.0.0
servers:
- url: http://localhost:8442
  description: Development server endpoint
- url: https://domain.app/rater/v1
  description: Stage Server endpoint
tags:
- name: CatalogBalance
  description: Catalog Balance resource
- name: CatalogCalendarProperty
  description: Catalog CalendarProperty resource
- name: CatalogCalendar
  description: Catalog Calendar resource
- name: CatalogCustomList
  description: Catalog CustomList resource
- name: CatalogLayout
  description: Catalog Layout resource
- name: CatalogPriceItem
  description: CatalogPriceItem resource
- name: CatalogProductOffering
  description: Catalog ProductOffering resource
- name: CatalogProduct
  description: Catalog Product resource
- name: CatalogProvider
  description: Catalog Provider resource
- name: CatalogRatingParameterSet
  description: Catalog RatingParameterSet resource
- name: CatalogRatingParameter
  description: Catalog RatingParameters resource
- name: CatalogService
  description: Catalog Service resource
- name: CatalogTariffPlan
  description: Catalog TariffPlan resource
- name: CatalogTariffSteps
  description: Catalog TariffPlan resource
- name: CatalogTariffs
  description: Catalog TariffPlan resource
- name: CatalogVersion
  description: Catalog Version resource
- name: CompatibilitySet
  description: Compatibility Set resource
- name: CustomerAccountBalances
  description: Catalog CustomerAccount balance resources, define access directly to
    all balances that belong to the particular customer account
- name: CustomerAccountOffers
  description: Catalog CustomerAccount offers resources, defines access directly to
    all offers that belongs to the particular customer account
- name: CustomerAccounts
  description: Catalog CustomerAccount resource
- name: EligibilitySet
  description: Eligibility Set resource
- name: SubscriberBalances
  description: Catalog Subscriber resource
- name: SubscriberOffers
  description: Catalog Subscriber resource
- name: Subscribers
  description: Catalog Subscriber resource
paths:
  /balances/{balanceId}:
    get:
      tags:
      - CatalogBalance
      summary: GetBalance
      description: Get Entity or list of Entity from service
      operationId: getBalance
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogBalance
      summary: UpdateBalance
      description: Change the entity specification
      operationId: updateBalance
      requestBody:
        $ref: '#/components/requestBodies/balance'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogBalance
      summary: DeleteBalance
      description: Delete the Entity
      operationId: deleteBalance
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogBalance
      summary: ModifyBalance
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyBalance
      requestBody:
        $ref: '#/components/requestBodies/balance'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/balanceId'
  /balances:
    get:
      tags:
      - CatalogBalance
      summary: GetBalanceList
      description: Get Entity or list of Entity from service
      operationId: getBalanceList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogBalance
      summary: CreateBalance
      description: Create a new Entity
      operationId: createBalance
      requestBody:
        $ref: '#/components/requestBodies/balance'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /balances/bulk:
    post:
      tags:
      - CatalogBalance
      summary: CreateOrUpdateBalanceList
      description: Create or update an entity list
      operationId: createOrUpdateBalanceList
      requestBody:
        $ref: '#/components/requestBodies/balanceList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogBalance
      summary: DeleteBalanceList
      description: Delete the Entity
      operationId: deleteBalanceList
      parameters:
      - $ref: '#/components/parameters/balanceIds'
      responses:
        204:
          description: Entity successfully deleted
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /calendars/{calendarId}/properties/{propertyId}:
    get:
      tags:
      - CatalogCalendarProperty
      summary: GetCalendarProperty
      description: Get Entity or list of Entity from service
      operationId: getCalendarProperty
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCalendarProperties'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogCalendarProperty
      summary: UpdateCalendarProperty
      description: Change the entity specification
      operationId: updateCalendarProperty
      requestBody:
        $ref: '#/components/requestBodies/property'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCalendarProperties'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogCalendarProperty
      summary: DeleteCalendarProperty
      description: Delete the Entity
      operationId: deleteCalendarProperty
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCalendarProperties'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogCalendarProperty
      summary: ModifyCalendarProperty
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyCalendarProperty
      requestBody:
        $ref: '#/components/requestBodies/property'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCalendarProperties'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/calendarId'
    - $ref: '#/components/parameters/propertyId'
  /calendars/{calendarId}/properties:
    get:
      tags:
      - CatalogCalendarProperty
      summary: GetCalendarPropertyList
      description: Get Entity or list of Entity from service
      operationId: getCalendarPropertyList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogCalendarProperties'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogCalendarProperty
      summary: CreateCalendarProperty
      description: Create a new Entity
      operationId: createCalendarProperty
      requestBody:
        $ref: '#/components/requestBodies/property'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCalendarProperties'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/calendarId'
  /calendars/properties/bulk:
    post:
      tags:
      - CatalogCalendarProperty
      summary: CreateOrUpdateCalendarPropertyList
      description: Create or update Entities
      operationId: createOrUpdateCalendarPropertyList
      requestBody:
        $ref: '#/components/requestBodies/propertyList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogCalendarProperties'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogCalendarProperty
      summary: DeleteCalendarPropertyList
      description: Delete the Entity
      operationId: deleteCalendarPropertyList
      parameters:
      - $ref: '#/components/parameters/propertyIds'
      responses:
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        204:
          description: Entity successfully deleted
  /calendars/{calendarId}:
    get:
      tags:
      - CatalogCalendar
      summary: GetCalendar
      description: Get Entity or list of Entity from service
      operationId: getCalendar
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCalendar'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogCalendar
      summary: UpdateCalendar
      description: Change the entity specification
      operationId: updateCalendar
      requestBody:
        $ref: '#/components/requestBodies/calendar'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCalendar'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogCalendar
      summary: DeleteCalendar
      description: Delete the Entity
      operationId: deleteCalendar
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCalendar'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogCalendar
      summary: ModifyCalendar
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyCalendar
      requestBody:
        $ref: '#/components/requestBodies/calendar'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCalendar'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/calendarId'
  /calendars:
    get:
      tags:
      - CatalogCalendar
      summary: GetCalendarList
      description: Get Entity or list of Entity from service
      operationId: getCalendarList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogCalendar'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogCalendar
      summary: CreateCalendar
      description: Create a new Entity
      operationId: createCalendar
      requestBody:
        $ref: '#/components/requestBodies/calendar'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCalendar'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /calendars/bulk:
    post:
      tags:
      - CatalogCalendar
      summary: CreateOrUpdateBalanceList
      description: Create or update an entity list
      operationId: createOrUpdateBalanceList
      requestBody:
        $ref: '#/components/requestBodies/calendarList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogCalendar'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogCalendar
      summary: DeleteBalanceList
      description: Delete the Entity
      operationId: deleteBalanceList
      parameters:
      - $ref: '#/components/parameters/calendarIds'
      responses:
        204:
          description: Entity successfully deleted
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /custom-lists/{customListId}:
    get:
      tags:
      - CatalogCustomList
      summary: GetCustomList
      description: Get Entity or list of Entity from service
      operationId: getCustomList
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCustomList'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogCustomList
      summary: UpdateCustomList
      description: Change the entity specification
      operationId: updateCustomList
      requestBody:
        $ref: '#/components/requestBodies/customList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCustomList'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogCustomList
      summary: DeleteCustomList
      description: Delete the Entity
      operationId: deleteCustomList
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCustomList'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogCustomList
      summary: ModifyCustomList
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyCustomList
      requestBody:
        $ref: '#/components/requestBodies/customList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCustomList'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/customListId'
  /custom-lists:
    get:
      tags:
      - CatalogCustomList
      summary: GetCustomListList
      description: Get Entity or list of Entity from service
      operationId: getCustomListList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogCustomList'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogCustomList
      summary: CreateCustomList
      description: Create a new Entity
      operationId: createCustomList
      requestBody:
        $ref: '#/components/requestBodies/customList'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogCustomList'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /custom-lists/bulk:
    post:
      tags:
      - CatalogCustomList
      summary: CreateOrUpdateCustomList
      description: Create or update the list of entities
      operationId: createOrUpdateCustomList
      requestBody:
        $ref: '#/components/requestBodies/customList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogCustomList'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogCustomList
      summary: DeleteCustomList
      description: Delete the Entity
      operationId: deleteCustomList
      parameters:
      - $ref: '#/components/parameters/customListIds'
      responses:
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        204:
          description: Delete operation completed successfully
  /layouts/{layoutId}:
    get:
      tags:
      - CatalogLayout
      summary: GetLayout
      description: Get Entity or list of Entity from service
      operationId: getLayout
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogLayout'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogLayout
      summary: UpdateLayout
      description: Change the entity specification
      operationId: updateLayout
      requestBody:
        $ref: '#/components/requestBodies/layout'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogLayout'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogLayout
      summary: DeleteLayout
      description: Delete the Entity
      operationId: deleteLayout
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogLayout'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogLayout
      summary: ModifyLayout
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyLayout
      requestBody:
        $ref: '#/components/requestBodies/layout'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogLayout'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/layoutId'
  /layouts:
    get:
      tags:
      - CatalogLayout
      summary: GetLayoutList
      description: Get Entity or list of Entity from service
      operationId: getLayoutList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogLayout'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogLayout
      summary: CreateLayout
      description: Create a new Entity
      operationId: createLayout
      requestBody:
        $ref: '#/components/requestBodies/layout'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogLayout'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /layouts/bulk:
    post:
      tags:
      - CatalogLayout
      summary: CreateOrUpdateLayoutList
      description: Create or update an entity list
      operationId: createOrUpdateLayoutList
      requestBody:
        $ref: '#/components/requestBodies/layoutList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogLayout'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogLayout
      summary: DeleteLayoutList
      description: Delete the Entity
      operationId: deleteLayoutList
      responses:
        204:
          description: Entity successfully deleted
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/layoutIds'
  /price-items/{priceItemId}:
    get:
      tags:
      - CatalogPriceItem
      summary: GetPriceItem
      description: Get Entity or list of Entity from service
      operationId: getPriceItem
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogPriceItem'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogPriceItem
      summary: UpdatePriceItem
      description: Change the entity specification
      operationId: updatePriceItem
      requestBody:
        $ref: '#/components/requestBodies/priceItem'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogPriceItem'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogPriceItem
      summary: DeletePriceItem
      description: Delete the Entity
      operationId: deletePriceItem
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogPriceItem'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogPriceItem
      summary: ModifyPriceItem
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyPriceItem
      requestBody:
        $ref: '#/components/requestBodies/priceItem'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogPriceItem'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/priceItemId'
  /price-items:
    get:
      tags:
      - CatalogPriceItem
      summary: GetPriceItemList
      description: Get Entity or list of Entity from service
      operationId: getPriceItemList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogPriceItem'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogPriceItem
      summary: CreatePriceItem
      description: Create a new Entity
      operationId: createPriceItem
      requestBody:
        $ref: '#/components/requestBodies/priceItem'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogPriceItem'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /price-items/bulk:
    post:
      tags:
      - CatalogPriceItem
      summary: CreateOrUpdatePriceItemList
      description: Create or update an entity list
      operationId: createOrUpdatePriceItemList
      requestBody:
        $ref: '#/components/requestBodies/priceItemList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogPriceItem'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogPriceItem
      summary: DeletePriceItemList
      description: Delete the Entity
      operationId: deletePriceItemList
      responses:
        204:
          description: Entity successfully deleted
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/priceItemIds'
  /product-offerings/{productOfferingId}:
    get:
      tags:
      - CatalogProductOffering
      summary: GetProductOffering
      description: Get Entity or list of Entity from service
      operationId: getProductOffering
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProductOffering'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogProductOffering
      summary: UpdateProductOffering
      description: Change the entity specification
      operationId: updateProductOffering
      requestBody:
        $ref: '#/components/requestBodies/productOffering'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProductOffering'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogProductOffering
      summary: DeleteProductOffering
      description: Delete the Entity
      operationId: deleteProductOffering
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProductOffering'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogProductOffering
      summary: ModifyProductOffering
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyProductOffering
      requestBody:
        $ref: '#/components/requestBodies/productOffering'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProductOffering'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/productOfferingId'
  /product-offerings:
    get:
      tags:
      - CatalogProductOffering
      summary: GetProductOfferingList
      description: Get Entity or list of Entity from service
      operationId: getProductOfferingList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogProductOffering'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogProductOffering
      summary: CreateProductOffering
      description: Create a new Entity
      operationId: createProductOffering
      requestBody:
        $ref: '#/components/requestBodies/productOffering'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProductOffering'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /product-offerings/bulk:
    post:
      tags:
      - CatalogProductOffering
      summary: CreateOrUpdateProductOfferingList
      description: Create or update an entity list
      operationId: createOrUpdateProductOfferingList
      requestBody:
        $ref: '#/components/requestBodies/productOfferingList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogProductOffering'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogProductOffering
      summary: DeleteProductOfferingList
      description: Delete the Entity
      operationId: deleteProductOfferingList
      responses:
        204:
          description: Entity successfully deleted
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/productOfferingIds'
  /products/{productId}:
    get:
      tags:
      - CatalogProduct
      summary: GetProduct
      description: Get Entity or list of Entity from service
      operationId: getProduct
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProduct'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogProduct
      summary: UpdateProduct
      description: Change the entity specification
      operationId: updateProduct
      requestBody:
        $ref: '#/components/requestBodies/product'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProduct'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogProduct
      summary: DeleteProduct
      description: Delete the Entity
      operationId: deleteProduct
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProduct'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogProduct
      summary: ModifyProduct
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyProduct
      requestBody:
        $ref: '#/components/requestBodies/product'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProduct'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/productId'
  /products:
    get:
      tags:
      - CatalogProduct
      summary: GetProductList
      description: Get Entity or list of Entity from service
      operationId: getProductList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogProduct'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogProduct
      summary: CreateProduct
      description: Create a new Entity
      operationId: createProduct
      requestBody:
        $ref: '#/components/requestBodies/product'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProduct'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /products/bulk:
    post:
      tags:
      - CatalogProduct
      summary: CreateOrUpdateProductList
      description: Create or update an entity list
      operationId: createOrUpdateProductList
      requestBody:
        $ref: '#/components/requestBodies/productList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogProduct'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogProduct
      summary: DeleteProductList
      description: Delete the Entity
      operationId: deleteProductList
      responses:
        204:
          description: Entity successfully deleted
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/productIds'
  /providers/{providerId}:
    get:
      tags:
      - CatalogProvider
      summary: GetProvider
      description: Get Entity or list of Entity from service
      operationId: getProvider
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProvider'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogProvider
      summary: UpdateProvider
      description: Change the entity specification
      operationId: updateProvider
      requestBody:
        $ref: '#/components/requestBodies/provider'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProvider'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogProvider
      summary: DeleteProvider
      description: Delete the Entity
      operationId: deleteProvider
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProvider'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogProvider
      summary: ModifyProvider
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyProvider
      requestBody:
        $ref: '#/components/requestBodies/provider'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProvider'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/providerId'
  /providers:
    get:
      tags:
      - CatalogProvider
      summary: GetProviderList
      description: Get Entity or list of Entity from service
      operationId: getProviderList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogProvider'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogProvider
      summary: CreateProvider
      description: Create a new Entity
      operationId: createProvider
      requestBody:
        $ref: '#/components/requestBodies/provider'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogProvider'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /providers/bulk:
    post:
      tags:
      - CatalogProvider
      summary: CreateOrUpdateProviderList
      description: Create or update an entity list
      operationId: createOrUpdateProviderList
      requestBody:
        $ref: '#/components/requestBodies/providerList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogProvider'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogProvider
      summary: DeleteProviderList
      description: Delete the Entity
      operationId: deleteProviderList
      responses:
        204:
          description: Entity successfully deleted
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/providerIds'
  /rating-parameter-sets/{parameterSetId}:
    get:
      tags:
      - CatalogRatingParameterSet
      summary: GetRatingParameterSet
      description: Get Entity or list of Entity from service
      operationId: getRatingParameterSet
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogRatingParameterSet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogRatingParameterSet
      summary: UpdateRatingParameterSet
      description: Change the entity specification
      operationId: updateRatingParameterSet
      requestBody:
        $ref: '#/components/requestBodies/parameterSet'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogRatingParameterSet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogRatingParameterSet
      summary: DeleteRatingParameterSet
      description: Delete the Entity
      operationId: deleteRatingParameterSet
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogRatingParameterSet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogRatingParameterSet
      summary: ModifyRatingParameterSet
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyRatingParameterSet
      requestBody:
        $ref: '#/components/requestBodies/parameterSet'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogRatingParameterSet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/parameterSetId'
  /rating-parameter-sets:
    get:
      tags:
      - CatalogRatingParameterSet
      summary: GetRatingParameterSetList
      description: Get Entity or list of Entity from service
      operationId: getRatingParameterSetList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogRatingParameterSet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogRatingParameterSet
      summary: CreateRatingParameterSet
      description: Create a new Entity
      operationId: createRatingParameterSet
      requestBody:
        $ref: '#/components/requestBodies/parameterSet'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogRatingParameterSet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /rating-parameter-sets/bulk:
    post:
      tags:
      - CatalogRatingParameterSet
      summary: CreateOrUpdateRatingParameterSetList
      description: Create or update an entity list
      operationId: createOrUpdateRatingParameterSetList
      requestBody:
        $ref: '#/components/requestBodies/parameterSetList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogRatingParameterSet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogRatingParameterSet
      summary: DeleteRatingParameterSetList
      description: Delete the Entity
      operationId: deleteRatingParameterSetList
      responses:
        204:
          description: Entity successfully deleted
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/parameterSetIds'
  /rating-parameters/{parameterId}:
    get:
      tags:
      - CatalogRatingParameter
      summary: GetRatingParameter
      description: Get Entity or list of Entity from service
      operationId: getRatingParameter
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogRatingParameter'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogRatingParameter
      summary: UpdateRatingParameter
      description: Change the entity specification
      operationId: updateRatingParameter
      requestBody:
        $ref: '#/components/requestBodies/parameter'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogRatingParameter'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogRatingParameter
      summary: DeleteRatingParameter
      description: Delete the Entity
      operationId: deleteRatingParameter
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogRatingParameter'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogRatingParameter
      summary: ModifyRatingParameter
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyRatingParameter
      requestBody:
        $ref: '#/components/requestBodies/parameter'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogRatingParameter'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/parameterId'
  /rating-parameters:
    get:
      tags:
      - CatalogRatingParameter
      summary: GetRatingParameterList
      description: Get Entity or list of Entity from service
      operationId: getRatingParameterList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogRatingParameter'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogRatingParameter
      summary: CreateRatingParameter
      description: Create a new Entity
      operationId: createRatingParameter
      requestBody:
        $ref: '#/components/requestBodies/parameter'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogRatingParameter'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /rating-parameters/bulk:
    post:
      tags:
      - CatalogRatingParameter
      summary: CreateOrUpdateRatingParameterList
      description: Create or update an entity list
      operationId: createOrUpdateRatingParameterList
      requestBody:
        $ref: '#/components/requestBodies/parameterList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogRatingParameter'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogRatingParameter
      summary: DeleteRatingParameterList
      description: Delete the Entity
      operationId: deleteRatingParameterList
      responses:
        204:
          description: Entity successfully deleted
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/parameterIds'
  /services/{serviceId}:
    get:
      tags:
      - CatalogService
      summary: GetService
      description: Get Entity or list of Entity from service
      operationId: getService
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogService'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogService
      summary: UpdateService
      description: Change the entity specification
      operationId: updateService
      requestBody:
        $ref: '#/components/requestBodies/service'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogService'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogService
      summary: DeleteService
      description: Delete the Entity
      operationId: deleteService
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogService'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogService
      summary: ModifyService
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyService
      requestBody:
        $ref: '#/components/requestBodies/service'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogService'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/serviceId'
  /services:
    get:
      tags:
      - CatalogService
      summary: GetServiceList
      description: Get Entity or list of Entity from service
      operationId: getServiceList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogService'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogService
      summary: CreateService
      description: Create a new Entity
      operationId: createService
      requestBody:
        $ref: '#/components/requestBodies/service'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogService'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /services/bulk:
    post:
      tags:
      - CatalogService
      summary: CreateOrUpdateServiceList
      description: Create or update an entity list
      operationId: createOrUpdateServiceList
      requestBody:
        $ref: '#/components/requestBodies/serviceList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogService'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogService
      summary: DeleteServiceList
      description: Delete the Entity
      operationId: deleteServiceList
      responses:
        204:
          description: Entity successfully deleted
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/serviceIds'
  /tariff-plans/{tariffPlanId}:
    get:
      tags:
      - CatalogTariffPlan
      summary: GetTariffPlan
      description: Get Entity or list of Entity from service
      operationId: getTariffPlan
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariffPlan'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogTariffPlan
      summary: UpdateTariffPlan
      description: Change the entity specification
      operationId: updateTariffPlan
      requestBody:
        $ref: '#/components/requestBodies/tariffPlan'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariffPlan'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogTariffPlan
      summary: DeleteTariffPlan
      description: Delete the Entity
      operationId: deleteTariffPlan
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariffPlan'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogTariffPlan
      summary: ModifyTariffPlan
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyTariffPlan
      requestBody:
        $ref: '#/components/requestBodies/tariffPlan'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariffPlan'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/tariffPlanId'
  /tariff-plans:
    get:
      tags:
      - CatalogTariffPlan
      summary: GetTariffPlanList
      description: Get Entity or list of Entity from service
      operationId: getTariffPlanList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogTariffPlan'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogTariffPlan
      summary: CreateTariffPlan
      description: Create a new Entity
      operationId: createTariffPlan
      requestBody:
        $ref: '#/components/requestBodies/tariffPlan'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariffPlan'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /tariff-plans/bulk:
    post:
      tags:
      - CatalogTariffPlan
      summary: CreateOrUpdateTariffPlanList
      description: Create or update an entity list
      operationId: createOrUpdateTariffPlanList
      requestBody:
        $ref: '#/components/requestBodies/tariffPlanList'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogTariffPlan'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogTariffPlan
      summary: DeleteTariffPlanList
      description: Delete the Entity
      operationId: deleteTariffPlanList
      responses:
        204:
          description: Entity successfully deleted
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/tariffPlanIds'
  /tariffs/{tariffId}/steps/{stepId}:
    get:
      tags:
      - CatalogTariffSteps
      summary: GetTariffStep
      description: Get Entity or list of Entity from service
      operationId: getTariffStep
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariffStep'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogTariffSteps
      summary: UpdateTariffStep
      description: Change the entity specification
      operationId: updateTariffStep
      requestBody:
        $ref: '#/components/requestBodies/step'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariffStep'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogTariffSteps
      summary: DeleteTariffStep
      description: Delete the Entity
      operationId: deleteTariffStep
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariffStep'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogTariffSteps
      summary: ModifyTariffStep
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyTariffStep
      requestBody:
        $ref: '#/components/requestBodies/step'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariffStep'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/tariffId'
    - $ref: '#/components/parameters/stepId'
  /tariffs/{tariffId}/steps:
    get:
      tags:
      - CatalogTariffSteps
      summary: GetTariffStepList
      description: Get Entity or list of Entity from service
      operationId: getTariffStepList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogTariffStep'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogTariffSteps
      summary: CreateTariffStep
      description: Create a new Entity
      operationId: createTariffStep
      requestBody:
        $ref: '#/components/requestBodies/step'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariffStep'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/tariffId'
  /tariffs/{tariffId}:
    get:
      tags:
      - CatalogTariffs
      summary: GetTariff
      description: Get Entity or list of Entity from service
      operationId: getTariff
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariff'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogTariffs
      summary: UpdateTariff
      description: Change the entity specification
      operationId: updateTariff
      requestBody:
        $ref: '#/components/requestBodies/tariff'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariff'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogTariffs
      summary: DeleteTariff
      description: Delete the Entity
      operationId: deleteTariff
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariff'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogTariffs
      summary: ModifyTariff
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyTariff
      requestBody:
        $ref: '#/components/requestBodies/tariff'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariff'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/tariffId'
  /tariffs:
    get:
      tags:
      - CatalogTariffs
      summary: GetTariffList
      description: Get Entity or list of Entity from service
      operationId: getTariffList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogTariff'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogTariffs
      summary: CreateTariff
      description: Create a new Entity
      operationId: createTariff
      requestBody:
        $ref: '#/components/requestBodies/tariff'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogTariff'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /versions/{versionId}:
    get:
      tags:
      - CatalogVersion
      summary: GetVersion
      description: Get Entity or list of Entity from service
      operationId: getVersion
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogVersion'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CatalogVersion
      summary: UpdateVersion
      description: Change the entity specification
      operationId: updateVersion
      requestBody:
        $ref: '#/components/requestBodies/version'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogVersion'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CatalogVersion
      summary: DeleteVersion
      description: Delete the Entity
      operationId: deleteVersion
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogVersion'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CatalogVersion
      summary: ModifyVersion
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyVersion
      requestBody:
        $ref: '#/components/requestBodies/version'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogVersion'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/versionId'
  /versions:
    get:
      tags:
      - CatalogVersion
      summary: GetVersionList
      description: Get Entity or list of Entity from service
      operationId: getVersionList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogVersion'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CatalogVersion
      summary: CreateVersion
      description: Create a new Entity
      operationId: createVersion
      requestBody:
        $ref: '#/components/requestBodies/version'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogVersion'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /compatibility-sets/{compatibilitySetId}:
    get:
      tags:
      - CompatibilitySet
      summary: GetCompatibilitySet
      description: Get Entity or list of Entity from service
      operationId: getCompatibilitySet
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompatibilitySet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CompatibilitySet
      summary: UpdateCompatibilitySet
      description: Change the entity specification
      operationId: updateCompatibilitySet
      requestBody:
        $ref: '#/components/requestBodies/compatibilitySet'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompatibilitySet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CompatibilitySet
      summary: DeleteCompatibilitySet
      description: Delete the Entity
      operationId: deleteCompatibilitySet
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompatibilitySet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CompatibilitySet
      summary: ModifyCompatibilitySet
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyCompatibilitySet
      requestBody:
        $ref: '#/components/requestBodies/compatibilitySet'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompatibilitySet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/compatibilitySetId'
  /compatibility-sets:
    get:
      tags:
      - CompatibilitySet
      summary: GetCompatibilitySetList
      description: Get Entity or list of Entity from service
      operationId: getCompatibilitySetList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompatibilitySet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CompatibilitySet
      summary: CreateCompatibilitySet
      description: Create a new Entity
      operationId: createCompatibilitySet
      requestBody:
        $ref: '#/components/requestBodies/compatibilitySet'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompatibilitySet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /customer-accounts/{accountId}/balances/{balanceId}:
    get:
      tags:
      - CustomerAccountBalances
      summary: GetSubscriberBalance
      description: Get Entity or list of Entity from service
      operationId: getSubscriberBalance
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CustomerAccountBalances
      summary: UpdateSubscriberBalance
      description: Change the entity specification
      operationId: updateSubscriberBalance
      requestBody:
        $ref: '#/components/requestBodies/balance'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CustomerAccountBalances
      summary: DeleteSubscriberBalance
      description: Delete the Entity
      operationId: deleteSubscriberBalance
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CustomerAccountBalances
      summary: ModifySubscriberBalance
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifySubscriberBalance
      requestBody:
        $ref: '#/components/requestBodies/balance'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/accountId'
    - $ref: '#/components/parameters/balanceId'
  /customer-accounts/{accountId}/balances:
    get:
      tags:
      - CustomerAccountBalances
      summary: GetSubscriberBalanceList
      description: Get Entity or list of Entity from service
      operationId: getSubscriberBalanceList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CustomerAccountBalances
      summary: CreateSubscriberBalance
      description: Create a new Entity
      operationId: createSubscriberBalance
      requestBody:
        $ref: '#/components/requestBodies/balance'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/accountId'
  /customer-accounts/{accountId}/offers/{offerId}:
    get:
      tags:
      - CustomerAccountOffers
      summary: GetSubscriberOffer
      description: Get Entity or list of Entity from service
      operationId: getSubscriberOffer
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CustomerAccountOffers
      summary: UpdateSubscriberOffer
      description: Change the entity specification
      operationId: updateSubscriberOffer
      requestBody:
        $ref: '#/components/requestBodies/offer'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CustomerAccountOffers
      summary: DeleteSubscriberOffer
      description: Delete the Entity
      operationId: deleteSubscriberOffer
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CustomerAccountOffers
      summary: ModifySubscriberOffer
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifySubscriberOffer
      requestBody:
        $ref: '#/components/requestBodies/offer'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/accountId'
    - $ref: '#/components/parameters/offerId'
  /customer-accounts/{accountId}/offers:
    get:
      tags:
      - CustomerAccountOffers
      summary: GetSubscriberOfferList
      description: Get Entity or list of Entity from service
      operationId: getSubscriberOfferList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CustomerAccountOffers
      summary: CreateSubscriberOffer
      description: Create a new Entity
      operationId: createSubscriberOffer
      requestBody:
        $ref: '#/components/requestBodies/offer'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/accountId'
  /customer-accounts/{accountId}:
    get:
      tags:
      - CustomerAccounts
      summary: GetAccount
      description: Get Entity or list of Entity from service
      operationId: getAccount
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAccount'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - CustomerAccounts
      summary: UpdateAccount
      description: Change the entity specification
      operationId: updateAccount
      requestBody:
        $ref: '#/components/requestBodies/account'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAccount'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - CustomerAccounts
      summary: DeleteAccount
      description: Delete the Entity
      operationId: deleteAccount
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAccount'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - CustomerAccounts
      summary: ModifyAccount
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyAccount
      requestBody:
        $ref: '#/components/requestBodies/account'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAccount'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/accountId'
  /customer-accounts:
    get:
      tags:
      - CustomerAccounts
      summary: GetAccountList
      description: Get Entity or list of Entity from service
      operationId: getAccountList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerAccount'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - CustomerAccounts
      summary: CreateAccount
      description: Create a new Entity
      operationId: createAccount
      requestBody:
        $ref: '#/components/requestBodies/account'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAccount'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters: []
  /eligibility-sets/{eligibilitiSetId}:
    get:
      tags:
      - EligibilitySet
      summary: GetEligibilitySet
      description: Get Entity or list of Entity from service
      operationId: getEligibilitySet
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EligibilitySet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - EligibilitySet
      summary: UpdateEligibilitySet
      description: Change the entity specification
      operationId: updateEligibilitySet
      requestBody:
        $ref: '#/components/requestBodies/eligibilitySet'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EligibilitySet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - EligibilitySet
      summary: CreateEligibilitySet
      description: Create a new Entity
      operationId: createEligibilitySet
      requestBody:
        $ref: '#/components/requestBodies/eligibilitySet'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EligibilitySet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - EligibilitySet
      summary: DeleteEligibilitySet
      description: Delete the Entity
      operationId: deleteEligibilitySet
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EligibilitySet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - EligibilitySet
      summary: ModifyEligibilitySet
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifyEligibilitySet
      requestBody:
        $ref: '#/components/requestBodies/eligibilitySet'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EligibilitySet'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/eligibilitySetId'
  /subscribers/{subscriberId}/balances/{balanceId}:
    get:
      tags:
      - SubscriberBalances
      summary: GetSubscriberBalance
      description: Get Entity or list of Entity from service
      operationId: getSubscriberBalance
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - SubscriberBalances
      summary: UpdateSubscriberBalance
      description: Change the entity specification
      operationId: updateSubscriberBalance
      requestBody:
        $ref: '#/components/requestBodies/balance'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - SubscriberBalances
      summary: DeleteSubscriberBalance
      description: Delete the Entity
      operationId: deleteSubscriberBalance
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - SubscriberBalances
      summary: ModifySubscriberBalance
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifySubscriberBalance
      requestBody:
        $ref: '#/components/requestBodies/balance'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/subscriberId'
    - $ref: '#/components/parameters/balanceId'
  /subscribers/{subscriberId}/balances:
    get:
      tags:
      - SubscriberBalances
      summary: GetSubscriberBalanceList
      description: Get Entity or list of Entity from service
      operationId: getSubscriberBalanceList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - SubscriberBalances
      summary: CreateSubscriberBalance
      description: Create a new Entity
      operationId: createSubscriberBalance
      requestBody:
        $ref: '#/components/requestBodies/balance'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberBalance'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/subscriberId'
  /subscribers/{subscriberId}/offers/{offerId}:
    get:
      tags:
      - SubscriberOffers
      summary: GetSubscriberOffer
      description: Get Entity or list of Entity from service
      operationId: getSubscriberOffer
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - SubscriberOffers
      summary: UpdateSubscriberOffer
      description: Change the entity specification
      operationId: updateSubscriberOffer
      requestBody:
        $ref: '#/components/requestBodies/offer'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - SubscriberOffers
      summary: DeleteSubscriberOffer
      description: Delete the Entity
      operationId: deleteSubscriberOffer
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - SubscriberOffers
      summary: ModifySubscriberOffer
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifySubscriberOffer
      requestBody:
        $ref: '#/components/requestBodies/offer'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/subscriberId'
    - $ref: '#/components/parameters/offerId'
  /subscribers/{subscriberId}/offers:
    get:
      tags:
      - SubscriberOffers
      summary: GetSubscriberOfferList
      description: Get Entity or list of Entity from service
      operationId: getSubscriberOfferList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - SubscriberOffers
      summary: CreateSubscriberOffer
      description: Create a new Entity
      operationId: createSubscriberOffer
      requestBody:
        $ref: '#/components/requestBodies/offer'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberOffer'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/subscriberId'
  /customer-accounts/{accountId}/subscribers/{subscriberId}:
    get:
      tags:
      - Subscribers
      summary: GetSubscriber
      description: Get Entity or list of Entity from service
      operationId: getSubscriber
      parameters: []
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - Subscribers
      summary: UpdateSubscriber
      description: Change the entity specification
      operationId: updateSubscriber
      requestBody:
        $ref: '#/components/requestBodies/subscriber'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Subscribers
      summary: DeleteSubscriber
      description: Delete the Entity
      operationId: deleteSubscriber
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
      - Subscribers
      summary: ModifySubscriber
      description: Change Entity properties to values specified in the request. Property
        not specified will remain the same.
      operationId: modifySubscriber
      requestBody:
        $ref: '#/components/requestBodies/subscriber'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/accountId'
    - $ref: '#/components/parameters/subscriberId'
  /customer-accounts/{accountId}/subscribers:
    get:
      tags:
      - Subscribers
      summary: GetSubscriberList
      description: Get Entity or list of Entity from service
      operationId: getSubscriberList
      parameters:
      - $ref: '#/components/parameters/search'
      responses:
        200:
          description: Entity is found and returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscriber'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - Subscribers
      summary: CreateSubscriber
      description: Create a new Entity
      operationId: createSubscriber
      requestBody:
        $ref: '#/components/requestBodies/subscriber'
      responses:
        201:
          description: Create operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
        400:
          description: Execution of user request failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/accountId'
components:
  schemas:
    Identity:
      type: object
      properties:
        id:
          type: integer
          description: Id of the object. It is global unique identificator, optional
            for minor objects and required for major objects. When object created
            Id will be generated by backend service.
          format: guid
          x-data-type: Guid
        name:
          type: string
          description: Name of the object. It is textual object identificator, need
            to be unique inside folder of the object.
          x-data-type: String
        description:
          type: string
          description: Description for the object functionality. It is text with specification
            of object and way it used in application.
          x-data-type: String
      description: Identity of object in DifHub. Objects can be identify by globaly
        unique Id and localy unique name.
      x-data-type: Structure
      x-version: 1.6.0
      x-path: /organizations/Apdax/systems/DifHub/applications/Organization/datasets/Identity
    EntityState:
      type: string
      description: Enumerator of the standard entity state.
      enum:
      - ACTIVE
      - INACTIVE
      - PENDING
      - DRAFT
      - ERROR
      - DELETED
      x-enum-metadata:
      - name: Active
        value: ACTIVE
        description: Entity active and can be used.
      - name: Inactive
        value: INACTIVE
        description: Entity inactive and can't be used.
      - name: Pending
        value: PENDING
        description: Entity pending approval and can't be used.
      - name: Draft
        value: DRAFT
        description: Entity in draft state and not ready yet for approval.
      - name: Error
        value: ERROR
        description: Entity have error and need to be fixed before it can be used
      - name: Deleted
        value: DELETED
        description: Record has been soft deleted
      x-data-type: Enum
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Framework/applications/Common/datasets/EntityState
    History:
      required:
      - createdBy
      - createdDate
      - modifiedBy
      - modifiedDate
      type: object
      properties:
        createdDate:
          type: string
          description: Date of the entity instance creation.
          format: date-time
          x-data-type: DateTime
        createdBy:
          type: string
          description: User (either id or name) created the entity instance.
          x-data-type: String
        modifiedDate:
          type: string
          description: Date of the entity instance last update.
          format: date-time
          x-data-type: DateTime
        modifiedBy:
          type: string
          description: User (either id or name) who last updated the entity instance.
          x-data-type: String
        reason:
          type: string
          description: Reason for entity change
          x-data-type: String
      description: History of the entity instance.
      x-data-type: Structure
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Framework/applications/Common/datasets/History
    Entity:
      required:
      - history
      - source
      - state
      - type
      type: object
      properties:
        parent:
          description: 'Reference to the parent entity of the current entity. Would
            include URI of the parent entity in the name. '
          allOf:
          - $ref: '#/components/schemas/Identity'
        type:
          type: string
          description: Type of the entity. It would be class name.
          x-data-type: String
        source:
          type: string
          description: The source system originated the entity.
          x-data-type: String
        state:
          description: State of the entity.
          allOf:
          - $ref: '#/components/schemas/EntityState'
        history:
          description: History of the entity instance.
          allOf:
          - $ref: '#/components/schemas/History'
      description: Updatable entity. Entity can be accessed through the API and referenced.
      x-data-type: Structure
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Framework/applications/Common/datasets/Entity
    CatalogBalance:
      required:
      - entity
      - identity
      - type
      - unitType
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: |
            The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        type:
          type: string
          description: Type of the balance
          x-data-type: String
        unitType:
          type: string
          description: Unit type of balance
          x-data-type: String
        minimumBalance:
          type: number
          description: Minimum balance
          format: long
          x-data-type: Long
        maximumBalance:
          type: number
          description: Maximum balance
          format: long
          x-data-type: Long
      description: Catalog balance resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogBalance
    CatalogCalendar:
      required:
      - entity
      - identity
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
      description: Catalog calendar resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogCalendar
    CatalogCalendarProperties:
      required:
      - calendar
      - domFrom
      - entity
      - identity
      - monthFrom
      - timeFrom
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        version:
          type: number
          description: version
          format: long
          x-data-type: Long
        height:
          type: integer
          description: height
          x-data-type: Integer
        monthFrom:
          type: integer
          description: month from
          x-data-type: Integer
        monthTo:
          type: integer
          description: month to
          x-data-type: Integer
        domFrom:
          type: integer
          description: dom from
          x-data-type: Integer
        domTo:
          type: integer
          description: dom to
          x-data-type: Integer
        timeFrom:
          type: integer
          description: time from
          x-data-type: Integer
        timeTo:
          type: integer
          description: time to
          x-data-type: Integer
        calendar:
          type: string
          description: Calendar reference
          format: 'system: Default | application: Rater | dataType: CatalogCalendar'
          x-data-type: Reference
      description: CatalogCalendarProperties structure
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogCalendarProperties
    CatalogCustomList:
      required:
      - entity
      - identity
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        list:
          type: object
          description: The JSON object describing the custom list data
          x-data-type: Binary
      description: CatalogCustomList resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogCustomList
    CatalogLayout:
      required:
      - entity
      - identity
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        version:
          type: number
          description: Version
          format: long
          x-data-type: Long
        billingParameterSet:
          type: string
          description: billingParameterSet
          format: 'system: Default | application: Rater | dataType: CatalogBillingParameterSet'
          x-data-type: Reference
        data:
          type: object
          description: The JSON data object describing the layout
          x-data-type: Binary
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogLayout
    CatalogOfferPrice:
      required:
      - currency
      - identity
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        currency:
          type: string
          description: currency
          x-data-type: String
        value:
          type: number
          description: Value of the currency
          format: long
          x-data-type: Long
      description: CatalogOfferPrice resource
      x-data-type: Structure
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogOfferPrice
    CatalogRecurringType:
      required:
      - identity
      - isCalendar
      - isProrated
      - type
      - value
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        type:
          type: string
          description: type
          x-data-type: String
        value:
          type: integer
          description: value
          x-data-type: Integer
        isProrated:
          type: boolean
          description: isProrated
          x-data-type: Boolean
        isCalendar:
          type: boolean
          description: isCalendar
          x-data-type: Boolean
      description: structure
      x-data-type: Structure
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogRecurringType
    CatalogOfferTerm:
      required:
      - effectiveDateFrom
      - identity
      - recurringType
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        offerPriority:
          type: integer
          description: Offer priority
          x-data-type: Integer
        allowance:
          type: integer
          description: Allowance
          x-data-type: Integer
        effectiveDateFrom:
          type: string
          description: EffectiveDateFrom
          format: date-time
          x-data-type: DateTime
        effectiveDateTo:
          type: string
          description: EffectiveDateFrom
          format: date-time
          x-data-type: DateTime
        tariffPlan:
          type: string
          description: tariffPlan
          format: 'system: Default | application: Rater | dataType: CatalogTariffPlan'
          x-data-type: Reference
        recurringType:
          description: recurringType
          allOf:
          - $ref: '#/components/schemas/CatalogRecurringType'
      description: Customer resource
      x-data-type: Structure
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogOfferTerm
    CatalogPriceItem:
      required:
      - currency
      - entity
      - identity
      - value
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        version:
          type: number
          description: Version
          format: long
          x-data-type: Long
        currency:
          type: string
          description: currency
          x-data-type: String
        value:
          type: number
          description: Value of the price item
          format: long
          x-data-type: Long
      description: resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogPriceItem
    CatalogProduct:
      required:
      - entity
      - identity
      - service
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        service:
          type: string
          description: service
          format: 'system: Default | application: Rater | dataType: CatalogService'
          x-data-type: Reference
        productOfferings:
          type: array
          description: productOfferings
          items:
            type: string
            description: productOfferings
            format: 'system: Default | application: Rater | dataType: CatalogProductOffering'
            x-data-type: Reference
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogProduct
    CatalogProductOfferingType:
      type: string
      description: CatalogProductOfferingType enum
      enum:
      - SIMPLE_PRODUCT_OFFERING
      - BUNDLE_PRODUCT_OFFERING
      x-enum-metadata:
      - name: Simple Product Offering
        value: SIMPLE_PRODUCT_OFFERING
        description: Simple Product Offering
      - name: Bundle Product Offering
        value: BUNDLE_PRODUCT_OFFERING
        description: Bundle Product Offering
      x-data-type: Enum
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogProductOfferingType
    CatalogProductOffering:
      required:
      - entity
      - identity
      - offerTerm
      - price
      - product
      - type
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        type:
          description: type
          allOf:
          - $ref: '#/components/schemas/CatalogProductOfferingType'
        product:
          type: string
          description: product
          format: 'system: Default | application: Rater | dataType: CatalogProduct'
          x-data-type: Reference
        balance:
          type: string
          description: balance
          format: 'system: Default | application: Rater | dataType: CatalogBalance'
          x-data-type: Reference
        price:
          description: price
          allOf:
          - $ref: '#/components/schemas/CatalogOfferPrice'
        offerTerm:
          description: offerTerm
          allOf:
          - $ref: '#/components/schemas/CatalogOfferTerm'
        simpleProductOffers:
          type: array
          description: simpleProductOffers
          items:
            type: string
            description: simpleProductOffers
            format: 'system: Default | application: Rater | dataType: CatalogProductOffering'
            x-data-type: Reference
        bundleProductOffers:
          type: array
          description: bundleProductOffers
          items:
            type: string
            description: bundleProductOffers
            format: 'system: Default | application: Rater | dataType: CatalogProductOffering'
            x-data-type: Reference
        compatibilitySets:
          type: array
          description: compatibilitySets
          items:
            type: string
            description: compatibilitySets
            format: 'system: Default | application: Rater | dataType: CompatibilitySet'
            x-data-type: Reference
        eligibilitySets:
          type: array
          description: eligibilitySets
          items:
            type: string
            description: eligibilitySets
            format: 'system: Default | application: Rater | dataType: EligibilitySet'
            x-data-type: Reference
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogProductOffering
    CatalogProvider:
      required:
      - entity
      - identity
      type: object
      properties:
        identity:
          description: Identity of the customer
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        services:
          type: array
          description: services
          items:
            type: string
            description: services
            format: 'system: Default | application: Rater | dataType: CatalogService'
            x-data-type: Reference
        exchangeRates:
          type: array
          description: exchangeRates
          items:
            type: string
            description: exchangeRates
            format: 'system: Default | application: Rater | dataType: ExchangeRate'
            x-data-type: Reference
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogProvider
    CatalogRatingParameter:
      required:
      - entity
      - identity
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        customList:
          type: string
          description: customList
          format: 'system: Default | application: Rater | dataType: CatalogCustomList'
          x-data-type: Reference
      description: Catalog billing resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogRatingParameter
    CatalogRatingParameterSet:
      required:
      - entity
      - identity
      - ratingParameters
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        layouts:
          type: array
          description: layouts
          items:
            type: string
            description: layouts
            format: 'system: Default | application: Rater | dataType: CatalogLayout'
            x-data-type: Reference
        ratingParameters:
          type: array
          description: important to keep the defined ordering of the elements
          items:
            type: string
            description: important to keep the defined ordering of the elements
            format: 'system: Default | application: Rater | dataType: CatalogRatingParameter'
            x-data-type: Reference
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogRatingParameterSet
    CatalogService:
      required:
      - entity
      - identity
      type: object
      properties:
        identity:
          description: Identity of the customer
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        products:
          type: array
          description: products
          items:
            type: string
            description: products
            format: 'system: Default | application: Rater | dataType: CatalogProduct'
            x-data-type: Reference
        providers:
          type: string
          description: providers
          format: 'system: Default | application: Rater | dataType: CatalogProvider'
          x-data-type: Reference
        statuses:
          type: array
          description: statuses
          items:
            type: string
            description: statuses
            format: 'system: Default | application: Rater | dataType: LcpStatus'
            x-data-type: Reference
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogService
    CatalogTariff:
      required:
      - entity
      - identity
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
      description: resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogTariff
    TariffCalendarRange:
      required:
      - tariff
      type: object
      properties:
        id:
          type: integer
          description: id
          format: guid
          x-data-type: Guid
        tariff:
          type: string
          description: Tariff id
          format: 'system: Default | application: Rater | dataType: CatalogTariff'
          x-data-type: Reference
        catalogCalendarProperty:
          type: string
          description: Catalog Calendar Property id
          format: 'system: Default | application: Rater | dataType: CatalogCalendarProperties'
          x-data-type: Reference
      description: TariffCalendarRange
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/TariffCalendarRange
    CatalogTariffPlan:
      required:
      - entity
      - identity
      - layout
      - ranges
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        version:
          type: number
          description: Version
          format: long
          x-data-type: Long
        layout:
          type: string
          description: layout
          format: 'system: Default | application: Rater | dataType: CatalogLayout'
          x-data-type: Reference
        calendar:
          type: string
          description: calendar
          format: 'system: Default | application: Rater | dataType: CatalogCalendar'
          x-data-type: Reference
        ranges:
          type: array
          description: ""
          items:
            description: ""
            allOf:
            - $ref: '#/components/schemas/TariffCalendarRange'
      description: Catalog tariff plan resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogTariffPlan
    CatalogTariffStep:
      required:
      - entity
      - identity
      - priceItem
      - quantity
      - repetitions
      - step
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource having API
          allOf:
          - $ref: '#/components/schemas/Entity'
        step:
          type: integer
          description: step
          x-data-type: Integer
        quantity:
          type: integer
          description: quantity
          x-data-type: Integer
        repetitions:
          type: integer
          description: repetitions
          x-data-type: Integer
        nextStep:
          type: integer
          description: Defines next step number
          x-data-type: Integer
        priceItem:
          type: string
          description: priceItem
          format: 'system: Default | application: Rater | dataType: CatalogPriceItem'
          x-data-type: Reference
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogTariffStep
    CatalogVersionProperties:
      required:
      - catalogObject
      - catalogObjectId
      type: object
      properties:
        catalogObject:
          type: string
          description: 'Type of the entity: CatalogPriceItem, Provider, etc.'
          x-data-type: String
        catalogObjectId:
          type: string
          description: Unique identifier (UUID) of the object
          x-data-type: String
      description: Catalog version properties
      x-data-type: Structure
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogVersionProperties
    CatalogVersion:
      required:
      - effectiveDateFrom
      - entity
      - identity
      - isCommitted
      - properties
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        version:
          type: number
          description: Version
          format: long
          x-data-type: Long
        effectiveDateFrom:
          type: string
          description: effectiveDateFrom
          format: date-time
          x-data-type: DateTime
        effectiveDateTo:
          type: string
          description: effectiveDateTo
          format: date-time
          x-data-type: DateTime
        isCommitted:
          type: boolean
          description: Defines the version is committed or not
          x-data-type: Boolean
        properties:
          type: array
          description: catalog version properties list
          items:
            description: catalog version properties list
            allOf:
            - $ref: '#/components/schemas/CatalogVersionProperties'
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CatalogVersion
    CompatibilitySet:
      required:
      - identity
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        type:
          type: string
          description: Compatibility set type (inclusive, exclusive)
          x-data-type: String
        offers:
          type: array
          description: productOffers
          items:
            type: string
            description: productOffers
            format: 'system: Default | application: Rater | dataType: CatalogProductOffering'
            x-data-type: Reference
      description: Compatibility set resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CompatibilitySet
    Customer:
      required:
      - identity
      - type
      type: object
      properties:
        identity:
          description: Identity of the customer
          allOf:
          - $ref: '#/components/schemas/Identity'
        type:
          type: string
          description: type
          x-data-type: String
        parent:
          type: array
          description: Parent customer UUID
          items:
            type: string
            description: Parent customer UUID
            format: 'system: Default | application: Rater | dataType: Customer'
            x-data-type: Reference
        customFields:
          type: object
          description: JSON fields of the customer
          x-data-type: Binary
        path:
          type: string
          description: Path
          x-data-type: String
      description: Customer resource
      x-data-type: Structure
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/Customer
    CustomerAccount:
      required:
      - currency
      - customer
      - entity
      - identity
      type: object
      properties:
        identity:
          description: Identity of the CustomerAccount
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The customer account is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        version:
          type: number
          description: Version
          format: long
          x-data-type: Long
        currency:
          type: string
          description: currency
          x-data-type: String
        customer:
          description: customer structure
          allOf:
          - $ref: '#/components/schemas/Customer'
        parent:
          type: string
          description: Parent customer account
          format: 'system: Default | application: Rater | dataType: CustomerAccount'
          x-data-type: Reference
        customFields:
          type: object
          description: JSON fields of the customer
          x-data-type: Binary
        path:
          type: string
          description: Path
          x-data-type: String
      description: Account of the customer
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/CustomerAccount
    EligibilitySetSchema:
      required:
      - identity
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        schema:
          type: object
          description: Json schema of properties for eligibility sets
          x-data-type: Binary
      description: Eligibility set schema resource
      x-data-type: Structure
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/EligibilitySetSchema
    EligibilitySet:
      required:
      - entity
      - identity
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        schema:
          description: schema
          allOf:
          - $ref: '#/components/schemas/EligibilitySetSchema'
        condition:
          type: string
          description: condition json path rule
          x-data-type: String
      description: Eligibility set resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/EligibilitySet
    EligibilitySetCondition:
      required:
      - condition
      - eligibilitySet
      - identity
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        condition:
          type: string
          description: Json path rule
          x-data-type: String
        eligibilitySet:
          type: string
          description: Reference to the eligibility set
          format: 'system: Default | application: Rater | dataType: EligibilitySet'
          x-data-type: Reference
      description: Eligibility set condition resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/EligibilitySetCondition
    ExchangeRate:
      required:
      - catalogProvider
      - effectiveDateFrom
      - entity
      - identity
      - rate
      type: object
      properties:
        identity:
          description: Identity of the entity
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        catalogProvider:
          type: string
          description: CatalogProvider reference
          format: 'system: Default | application: Rater | dataType: CatalogProvider'
          x-data-type: Reference
        rate:
          type: number
          description: Exchange rate value
          format: long
          x-data-type: Long
        effectiveDateFrom:
          type: string
          description: Required effectiveDateFrom
          format: date-time
          x-data-type: DateTime
        effectiveDateTo:
          type: string
          description: Required effectiveDateFrom
          format: date-time
          x-data-type: DateTime
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/ExchangeRate
    LcpStatus:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: status
          x-data-type: String
      description: LcpStatus
      x-data-type: Structure
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/LcpStatus
    Subscriber:
      required:
      - entity
      - identity
      - isVirtual
      type: object
      properties:
        identity:
          description: Identity of the customer
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        version:
          type: number
          description: Version
          format: long
          x-data-type: Long
        isVirtual:
          type: boolean
          description: Defines the virtual subscriber or not
          x-data-type: Boolean
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/Subscriber
    SubscriberBalance:
      required:
      - balance
      - balanceType
      - entity
      - identity
      - isVirtual
      - unitType
      type: object
      properties:
        identity:
          description: Identity of the customer
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        parent:
          type: string
          description: Reference to the parent balance
          format: 'system: Default | application: Rater | dataType: SubscriberBalance'
          x-data-type: Reference
        balanceType:
          type: string
          description: 'Type of the balance, values: prepaid, postpaid'
          x-data-type: String
        unitType:
          type: string
          description: 'Unit type of balance: monetary, unit'
          x-data-type: String
        balance:
          type: number
          description: Value of the balance
          format: long
          x-data-type: Long
        isVirtual:
          type: boolean
          description: Identifies the balance is virtual or not
          x-data-type: Boolean
        minimumBalance:
          type: number
          description: Defines minimum balance
          format: long
          x-data-type: Long
        maximumBalance:
          type: number
          description: Defines maximum balance
          format: long
          x-data-type: Long
        offers:
          type: string
          description: Reference to the subscriber offers
          format: 'system: Default | application: Rater | dataType: SubscriberOffer'
          x-data-type: Reference
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/SubscriberBalance
    SubscriberOffer:
      required:
      - entity
      - identity
      - isPrimary
      - productOffering
      - subscriber
      type: object
      properties:
        identity:
          description: Identity of the customer
          allOf:
          - $ref: '#/components/schemas/Identity'
        entity:
          description: The entity is a resource which has REST API
          allOf:
          - $ref: '#/components/schemas/Entity'
        subscriber:
          type: string
          description: Reference to the subscriber
          format: 'system: Default | application: Rater | dataType: Subscriber'
          x-data-type: Reference
        productOffering:
          type: string
          description: Reference to the product offering
          format: 'system: Default | application: Rater | dataType: CatalogProductOffering'
          x-data-type: Reference
        isPrimary:
          type: boolean
          description: Defines the offer is primary or addon
          x-data-type: Boolean
        offerDetails:
          type: object
          description: JSON containing the offer details
          x-data-type: Binary
        priority:
          type: integer
          description: Defines the priority of the offer
          x-data-type: Integer
      description: Customer resource
      x-data-type: Resource
      x-version: 1.0.0
      x-path: /organizations/BD Innovations/systems/Default/applications/Rater/datasets/SubscriberOffer
    Severity:
      type: string
      description: 'Severity of the error. Enumerate classification of the error severity
        in execution path.  '
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
      x-enum-metadata:
      - name: Fatal
        value: "0"
        description: A severe error that causes your system to crash, resulting in
          the loss or corruption of unsaved data.
      - name: Error
        value: "1"
        description: A severe error that might cause the loss or corruption of unsaved
          data. Immediate action must be taken to prevent losing data.
      - name: Warning
        value: "2"
        description: Action must be taken at some stage to prevent a severe error
          from occurring in the future.
      - name: Info
        value: "3"
        description: An informative message, usually describing server activity. No
          action is necessary.
      x-data-type: Enum
      x-version: 1.1.0
      x-path: /organizations/Apdax/systems/DifHub/applications/Organization/datasets/Severity
    Error:
      type: object
      properties:
        code:
          type: string
          description: 'Error code. '
          x-data-type: String
        severity:
          description: 'Severity specified how severe error in current execution path. '
          allOf:
          - $ref: '#/components/schemas/Severity'
        text:
          type: string
          description: Error text. When error return text will be formate, based on
            text string, properties and language.
          x-data-type: String
        description:
          type: string
          description: 'Error description contains detailed information about error. '
          x-data-type: String
        entity:
          type: string
          description: URI to object or entity error associated with.
          x-data-type: String
        field:
          type: string
          description: Name of the field error associated with.
          x-data-type: String
      description: |
        Entity encapsulating the details of an error. This allows the recipient to know details about the error and what may have caused the error.
      x-data-type: Resource
      x-version: 1.3.0
      x-path: /organizations/Apdax/systems/DifHub/applications/Organization/datasets/Error
  parameters:
    search:
      name: search
      in: query
      description: Fields for the RSQL search
      required: false
      schema:
        type: string
    balanceId:
      name: balanceId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    balanceIds:
      name: balanceIds
      in: query
      description: Entity UUID
      required: true
      explode: false
      schema:
        type: array
        items:
          type: string
    calendarId:
      name: calendarId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    propertyId:
      name: propertyId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    propertyIds:
      name: propertyIds
      in: query
      description: Entity UUID
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
    calendarIds:
      name: calendarIds
      in: query
      description: Entity UUID
      required: true
      explode: false
      schema:
        type: array
        items:
          type: string
    customListId:
      name: customListId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    customListIds:
      name: customListIds
      in: query
      description: Entity UUID
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
    layoutId:
      name: layoutId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    layoutIds:
      name: layoutIds
      in: path
      description: Entity UUID
      required: true
      schema:
        type: array
        items:
          type: string
    priceItemId:
      name: priceItemId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    priceItemIds:
      name: priceItemIds
      in: path
      description: Entity UUID
      required: true
      schema:
        type: array
        items:
          type: string
    productOfferingId:
      name: productOfferingId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    productOfferingIds:
      name: productOfferingIds
      in: path
      description: Entity UUID
      required: true
      schema:
        type: array
        items:
          type: string
    productId:
      name: productId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    productIds:
      name: productIds
      in: path
      description: Entity UUID
      required: true
      schema:
        type: array
        items:
          type: string
    providerId:
      name: providerId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    providerIds:
      name: providerIds
      in: path
      description: Entity UUID
      required: true
      schema:
        type: array
        items:
          type: string
    parameterSetId:
      name: parameterSetId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    parameterSetIds:
      name: parameterSetIds
      in: path
      description: Entity UUID
      required: true
      schema:
        type: array
        items:
          type: string
    parameterId:
      name: parameterId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    parameterIds:
      name: parameterIds
      in: path
      description: Entity UUID
      required: true
      schema:
        type: array
        items:
          type: string
    serviceId:
      name: serviceId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    serviceIds:
      name: serviceIds
      in: path
      description: Entity UUID
      required: true
      schema:
        type: array
        items:
          type: string
    tariffPlanId:
      name: tariffPlanId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    tariffPlanIds:
      name: tariffPlanIds
      in: path
      description: Entity UUID
      required: true
      schema:
        type: array
        items:
          type: string
    tariffId:
      name: tariffId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    stepId:
      name: stepId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    versionId:
      name: versionId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    compatibilitySetId:
      name: compatibilitySetId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    accountId:
      name: accountId
      in: path
      description: Customer account UUID
      required: true
      schema:
        type: string
    offerId:
      name: offerId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    eligibilitySetId:
      name: eligibilitySetId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
    subscriberId:
      name: subscriberId
      in: path
      description: Entity UUID
      required: true
      schema:
        type: string
  requestBodies:
    balance:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriberBalance'
      required: true
    balanceList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogBalance'
      required: true
    property:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogCalendarProperties'
      required: true
    propertyList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogCalendarProperties'
      required: true
    calendar:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogCalendar'
      required: true
    calendarList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogBalance'
      required: true
    customList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogCustomList'
      required: true
    layout:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogLayout'
      required: true
    layoutList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogLayout'
      required: true
    priceItem:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogPriceItem'
      required: true
    priceItemList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogLayout'
      required: true
    productOffering:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogProductOffering'
      required: true
    productOfferingList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogProductOffering'
      required: true
    product:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogProduct'
      required: true
    productList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogProduct'
      required: true
    provider:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogProvider'
      required: true
    providerList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogProvider'
      required: true
    parameterSet:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogRatingParameterSet'
      required: true
    parameterSetList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogRatingParameterSet'
      required: true
    parameter:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogRatingParameter'
      required: true
    parameterList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogRatingParameter'
      required: true
    service:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogService'
      required: true
    serviceList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogService'
      required: true
    tariffPlan:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogTariffPlan'
      required: true
    tariffPlanList:
      description: The entity in the body
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CatalogTariffPlan'
      required: true
    step:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogTariffStep'
      required: true
    tariff:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogTariff'
      required: true
    version:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CatalogVersion'
      required: true
    compatibilitySet:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompatibilitySet'
      required: true
    offer:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriberOffer'
      required: true
    account:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerAccount'
      required: true
    eligibilitySet:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EligibilitySet'
      required: true
    subscriber:
      description: The entity in the body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subscriber'
      required: true
