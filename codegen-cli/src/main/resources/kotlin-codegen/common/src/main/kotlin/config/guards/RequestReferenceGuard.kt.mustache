package {{basePackage}}.config.guards

import org.slf4j.LoggerFactory
import org.springframework.http.HttpEntity
import org.springframework.http.HttpHeaders
import org.springframework.http.HttpMethod
import org.springframework.stereotype.Component
import org.springframework.web.client.RestTemplate
import java.lang.IllegalArgumentException
import javax.servlet.http.HttpServletRequest

@Component("referenceGuard")
class RequestReferenceGuard(private val rest: RestTemplate) {

	companion object {
		private val log = LoggerFactory.getLogger(RequestHeaderGuard::class.java)
	}

	fun check(request: HttpServletRequest,
			  headerName: String,
			  format: String): Boolean {
		val header = request.getHeader(headerName)
		if (header == null) {
			log.debug("Header $headerName is missing")
			return false
		}

		val formatParts = format.split("/")
		// 1st part should define host of the application
		// 2nd part is variable {referenceUri} to replace or uri
		// 3rd is optional suffix
		if (formatParts.size < 2) {
			log.error("Can not build uri from invalid format")
			return false
		}
		val host = "${formatParts[0]}:8080"
		val resource = formatParts.drop(1).joinToString("/").replace("{referenceUri}", header)
		val uri = "http://$host/$resource"

		val exchangeRequest = HttpEntity<String>(HttpHeaders().apply {
			for (itHeader in request.headerNames) {
				set(itHeader, request.getHeader(itHeader))
			}
			set("X-entity-partyId", request.getHeader("X-access-partyId"))
		})

		return try {
			rest.exchange(uri, HttpMethod.POST, exchangeRequest, Boolean::class.java).body ?: false
		} catch (e: Exception) {
			log.error("Failed while request enforcer $uri", e)
			return false
		}
	}
}
