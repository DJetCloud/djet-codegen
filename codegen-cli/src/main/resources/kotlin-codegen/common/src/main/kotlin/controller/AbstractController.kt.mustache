package {{basePackage}}.controller

import {{basePackage}}.domain.BaseResource
import {{basePackage}}.domain.Identity
import {{basePackage}}.exception.InvalidRequestException
import {{basePackage}}.exception.ResourceNotFoundException
import {{basePackage}}.service.CommonService
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.util.Assert
import org.springframework.web.bind.annotation.*

abstract class AbstractController<E: BaseResource, S: CommonService<E>>(val  service: S):
		CommonController<E>, CommonParameterizedController<E> {

	override fun create(domain: E): ResponseEntity<E> {
		val result = service.save(domain)?: throw InvalidRequestException()
		return ResponseEntity(result, HttpStatus.CREATED)
	}

	override fun delete(id: String, filter: Map<String, Any?>?): ResponseEntity<E> {
		val filterQuery = getFilterQuery(filter)
		val entity = if (filterQuery.isNullOrEmpty()) {
			service.getById(id) ?: throw ResourceNotFoundException()
		} else {
			service.getByIdAndFilter(id, filterQuery) ?: throw ResourceNotFoundException()
		}
		service.delete(entity)
		return ResponseEntity(entity, HttpStatus.OK)
	}

	override fun getById(id: String, filter: Map<String, Any?>?): ResponseEntity<E> {
		val filterQuery = getFilterQuery(filter)
		val entity = if (filterQuery.isNullOrEmpty()) {
			service.getById(id) ?: throw ResourceNotFoundException()
		} else {
			service.getByIdAndFilter(id, filterQuery) ?: throw ResourceNotFoundException()
		}
		return ResponseEntity(entity, HttpStatus.OK)
	}

	override fun getAll(search: String?, pageable : Pageable, filter: Map<String, Any?>?): ResponseEntity<Page<E>> {
		val searchCriteria = getSearchCriteria(search, filter)
		return ResponseEntity(service.getAll(pageable, searchCriteria), HttpStatus.OK)
	}

	override fun update(id: String, domain: E, filter: Map<String, Any?>?): ResponseEntity<E> {
		val filterQuery = getFilterQuery(filter)
		if (!filterQuery.isNullOrEmpty()) {
			service.getByIdAndFilter(id, filterQuery) ?: throw ResourceNotFoundException()
		}
		domain.id = id
		val result = service.update(domain)?: throw InvalidRequestException()
		return ResponseEntity(result, HttpStatus.OK)
	}

	override fun modify(id: String, domain: E, filter: Map<String, Any?>?): ResponseEntity<E> {
		return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
	}

	override fun saveAll(domains: List<E>, filter: Map<String, Any?>?): List<E> {
		val filterQuery = getFilterQuery(filter)
		if (!filterQuery.isNullOrEmpty()) {
			domains.forEach{
				val id = it.id ?: throw ResourceNotFoundException()
				service.getByIdAndFilter(id, filterQuery) ?: throw ResourceNotFoundException()
			}
		}
		return service.saveAll(domains)
	}

	override fun deleteAll(@RequestParam ids: List<String>, filter: Map<String, Any?>?): List<E> {
		val domains = service.getByIds(ids)
		val filterQuery = getFilterQuery(filter)
		if (!filterQuery.isNullOrEmpty()) {
			domains.forEach{
				val id = it.id ?: throw ResourceNotFoundException()
				service.getByIdAndFilter(id, filterQuery) ?: throw ResourceNotFoundException()
			}
		}
		service.deleteAll(domains)
		return domains
	}

	override fun create(parentId: String, domain: E): ResponseEntity<E> {
		if(domain.entity.parent != null) {
			domain.entity.parent!!.id = parentId
		} else {
			domain.entity.parent = Identity(id = parentId)
		}
		val result = service.save(domain) ?: throw InvalidRequestException()
		return ResponseEntity(result, HttpStatus.CREATED)
	}

	override fun getById(parentId: String, id: String, filter: Map<String, Any?>?): ResponseEntity<E> {
		val filterQuery = getFilterQuery(filter)
		val domain = if (filterQuery.isNullOrEmpty()) {
			service.getById(id) ?: throw ResourceNotFoundException()
		} else {
			service.getByIdAndFilter(id, filterQuery) ?: throw ResourceNotFoundException()
		}
		{{#hasEntityBlocks}}
		Assert.isTrue(parentId == domain.entity.parent?.id, "parent $parentId is not valid")
		{{/hasEntityBlocks}}
		{{^hasEntityBlocks}}
		//TODO: should assert parent id here
		{{/hasEntityBlocks}}
		return ResponseEntity(domain, HttpStatus.OK)
	}

	override fun delete(parentId: String, id: String, filter: Map<String, Any?>?): ResponseEntity<E> {
		val filterQuery = getFilterQuery(filter)
		val domain = if (filterQuery.isNullOrEmpty()) {
			service.getById(id) ?: throw ResourceNotFoundException()
		} else {
			service.getByIdAndFilter(id, filterQuery) ?: throw ResourceNotFoundException()
		}
		validateParent(domain, parentId)
		service.delete(domain)
		return ResponseEntity(domain, HttpStatus.OK)
	}

	override fun update(parentId: String, id: String, domain: E, filter: Map<String, Any?>?): ResponseEntity<E> {
		val filterQuery = getFilterQuery(filter)
		if (!filterQuery.isNullOrEmpty()) {
			service.getByIdAndFilter(id, filterQuery) ?: throw ResourceNotFoundException()
		}
		validateParent(domain, parentId)
		domain.id = id
		val updatedEntity = service.update(domain)
		return ResponseEntity(updatedEntity, HttpStatus.OK)
	}

	override fun modify(parentId: String, id: String, domain: E, filter: Map<String, Any?>?): ResponseEntity<E> {
		return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
	}

	override fun saveAll(parentId: String, domains: List<E>, filter: Map<String, Any?>?): List<E> {
		val filterQuery = getFilterQuery(filter)
		if (filterQuery.isNullOrEmpty()) {
			domains.forEach {
				validateParent(it, parentId)
				{{#hasIdentityBlocks}}
				it.id = it.identity.id
				{{/hasIdentityBlocks}}
			}
		} else {
			domains.forEach {
				val id = it.id ?: throw ResourceNotFoundException()
				service.getByIdAndFilter(id, filterQuery) ?: throw ResourceNotFoundException()
				validateParent(it, parentId)
				{{#hasIdentityBlocks}}
				it.id = it.identity.id
				{{/hasIdentityBlocks}}
			}
		}
		return service.saveAll(domains)
	}

	override fun deleteAll(parentId: String, ids: List<String>, filter: Map<String, Any?>?): List<E> {
		val entities = service.getByIds(ids)
		val filterQuery = getFilterQuery(filter)
		if (filterQuery.isNullOrEmpty()) {
			entities.forEach { domain ->
				validateParent(domain, parentId)
			}
		} else {
			entities.forEach {
				val id = it.id ?: throw ResourceNotFoundException()
				service.getByIdAndFilter(id, filterQuery) ?: throw ResourceNotFoundException()
				validateParent(it, parentId)
			}
		}
		service.deleteAll(entities)
		return entities
	}

	override fun getAll(parentId: String, search: String?, pageable: Pageable, filter: Map<String, Any?>?): ResponseEntity<Page<E>> {
		val searchCriteria = getSearchCriteria(search, parentId, filter)
		return ResponseEntity(service.getAll(pageable, searchCriteria), HttpStatus.OK)
	}

	private fun validateParent(domain: E, parentId: String) {
		{{#hasEntityBlocks}}
		Assert.notNull(domain.entity.parent, "parent can not be empty")
		Assert.notNull(domain.entity.parent?.id, "parent id is required")
		Assert.isTrue(parentId == domain.entity.parent?.id, "parent $parentId is not valid")
		{{/hasEntityBlocks}}
		{{^hasEntityBlocks}}
		//TODO: should check parent id here
		{{/hasEntityBlocks}}
	}

	private fun getSearchCriteria(query: String?, filter: Map<String, Any?>?): String? {
		val filterQuery = getFilterQuery(filter)
		return if (filterQuery.isNullOrBlank()) {
			if (query.isNullOrBlank()) {
				null
			} else {
				query
			}
		} else if (query.isNullOrBlank()) {
			filterQuery
		} else {
			"$filterQuery;$query"
		}
	}

	private fun getSearchCriteria(query: String?, parentId: String, filter: Map<String, Any?>?): String {
		val baseSearchCriteria = getSearchCriteria(query, filter)
		val underParentSearchCriteria = "entity.parent.id==$parentId"
		return if (baseSearchCriteria.isNullOrBlank()) {
			underParentSearchCriteria
		} else {
			"$underParentSearchCriteria;$baseSearchCriteria"
		}
	}

	private fun getFilterQuery(filter: Map<String, Any?>?): String? {
		var result = ""
		filter?.keys?.forEach { key ->
			if (key != null) {
				val value = filter[key]
				if (value != null) {
					result = "$result;$key==$value"
				}
			}
		} ?: return null
		return result
	}
}
