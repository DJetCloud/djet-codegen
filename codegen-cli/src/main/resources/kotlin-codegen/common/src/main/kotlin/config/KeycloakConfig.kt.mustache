package {{basePackage}}.config

import {{basePackage}}.security.urlmapper.CommonUrlAccessMapper
import {{basePackage}}.security.urlmapper.UrlAccessMapper
import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver
import org.keycloak.adapters.springsecurity.KeycloakConfiguration
import org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.context.annotation.Bean
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity
import org.springframework.security.config.annotation.web.builders.HttpSecurity
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.core.session.SessionRegistryImpl
import org.springframework.security.web.authentication.logout.LogoutFilter
import org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy
import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy
import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping
import javax.annotation.PostConstruct


@KeycloakConfiguration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)
class KeycloakConfig : KeycloakWebSecurityConfigurerAdapter() {

	@Bean
    fun keycloakConfigResolver() = KeycloakSpringBootConfigResolver()

    @Autowired
    fun configureGlobal(auth: AuthenticationManagerBuilder) {
        val keycloakAuthenticationProvider = keycloakAuthenticationProvider()
        keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(SimpleAuthorityMapper())
        auth.authenticationProvider(keycloakAuthenticationProvider)
    }

    @Bean
    override fun sessionAuthenticationStrategy(): SessionAuthenticationStrategy {
        return RegisterSessionAuthenticationStrategy(SessionRegistryImpl())
    }

	@Autowired
	fun EndpointListener(requestHandlerMapping: RequestMappingHandlerMapping) {
		requestHandlerMapping.handlerMethods
	}

    @PostConstruct
    fun setSecurityContextHolderStrategy() {
        SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_INHERITABLETHREADLOCAL)
    }

    override fun configure(http: HttpSecurity) {
		http
			.cors()
			.and()
			.csrf().disable()
//			.csrf().requireCsrfProtectionMatcher(keycloakCsrfRequestMatcher())
//			.and()
			.sessionManagement()
			.sessionAuthenticationStrategy(sessionAuthenticationStrategy())
			.and()
			.addFilterBefore(keycloakPreAuthActionsFilter(), LogoutFilter::class.java)
			.addFilterBefore(keycloakAuthenticationProcessingFilter(), LogoutFilter::class.java)
			.addFilterAfter(keycloakSecurityContextRequestFilter(), SecurityContextHolderAwareRequestFilter::class.java)
			.addFilterAfter(
				keycloakAuthenticatedActionsRequestFilter(),
				SecurityContextHolderAwareRequestFilter::class.java
			)
			.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint())
			.and()
			.logout()
			.addLogoutHandler(keycloakLogoutHandler())
			.logoutUrl("/sso/logout").permitAll()
			.logoutSuccessUrl("/")
			.and()
			.authorizeRequests().apply { urlMappers().forEach { it.applyUrlMappings(this) } }
			.anyRequest().authenticated()
    }

	private fun urlMappers(): Set<UrlAccessMapper> {
		return setOf(CommonUrlAccessMapper())
	}

}