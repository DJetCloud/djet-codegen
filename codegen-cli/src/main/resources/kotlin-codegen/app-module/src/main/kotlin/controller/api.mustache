package {{appPackage}}.controller.api

{{#imports}}import {{import}}
{{/imports}}
{{#operations}}
	{{#operation}}
		{{#vendorExtensions.mustBuildFilterClass}}
import {{appPackage}}.controller.filter.{{vendorExtensions.filterClassName}}
		{{/vendorExtensions.mustBuildFilterClass}}
	{{/operation}}
{{/operations}}
import io.swagger.annotations.Api
import io.swagger.annotations.ApiOperation
import io.swagger.annotations.ApiResponse
import io.swagger.annotations.ApiResponses
import io.swagger.annotations.ApiParam
import org.springframework.http.HttpStatus
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.data.domain.Sort
import org.springframework.data.web.PageableDefault
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*

{{>generatedAnnotation}}
@Api(value = "{{{baseName}}}", tags = ["{{{baseName}}}"], description = "the {{{baseName}}} API")
{{#operations}}
interface {{classname}} {
{{#operation}}

    @ApiOperation(value = "{{{summary}}}", nickname = "{{{operationId}}}", notes = "{{{notes}}}", tags={{#vendorExtensions.x-tags}}["{{tag}}"]{{#hasMore}},{{/hasMore}}{{/vendorExtensions.x-tags}})
    @ApiResponses({{#responses}}
        ApiResponse(code = {{{code}}}, message = "{{{message}}}"){{#hasMore}},{{/hasMore}}{{/responses}}
    )
    @{{httpMethod}}Mapping("{{{path}}}")
    fun {{vendorExtensions.operationMethodName}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{>pageParams}}{{>filterParams}}{{#hasMore}},{{/hasMore}}{{^hasMore}}{{/hasMore}}{{/allParams}}): {{#responseWrapper}}{{.}}<{{/responseWrapper}}ResponseEntity<{{>returnTypes}}>{{#responseWrapper}}>{{/responseWrapper}} {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
{{/operation}}

}
{{/operations}}
