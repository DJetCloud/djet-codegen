package {{appPackage}}.controller.filter

import {{basePackage}}.controller.CommonFilter
import {{appPackage}}.domain.{{returnEntityType}}
import {{appPackage}}.domain.{{returnEntityType}}_
import org.springframework.data.jpa.domain.Specification
import javax.persistence.criteria.CriteriaBuilder
import javax.persistence.criteria.CriteriaQuery
import javax.persistence.criteria.Root

{{#operations}}
	{{#operation}}
	{{#vendorExtensions.mustBuildFilterClass}}
class {{vendorExtensions.filterClassName}} (
	{{#vendorExtensions.filters}}
	val {{filter}}:{{dataType}}{{#hasNext}},{{/hasNext}}
	{{/vendorExtensions.filters}}
) : CommonFilter<{{returnEntityType}}> {
	override fun toSpecification(): Specification<{{returnEntityType}}> {
		return {{#vendorExtensions.filters}}{{^isFirst}}.and({{/isFirst}}by{{Filter}}(){{^isFirst}}){{/isFirst}}{{/vendorExtensions.filters}}
	}
	{{#vendorExtensions.filters}}

	private fun by{{Filter}}(): Specification<{{returnEntityType}}> {
		return Specification { root: Root<{{returnEntityType}}>, _: CriteriaQuery<*>, builder: CriteriaBuilder ->
			{{filter}}?.let { builder.equal(root.get({{returnEntityType}}_.{{filter}}), it) }
		}
	}
	{{/vendorExtensions.filters}}

	override fun getQuery(): String {
		{{#vendorExtensions.filters}}
		val {{filter}}Query = if ({{filter}} != null) "{{filter}}==${{filter}}{{#hasNext}};{{/hasNext}}" else ""
		{{/vendorExtensions.filters}}
		return {{#vendorExtensions.filters}}{{filter}}Query{{#hasNext}} + {{/hasNext}}{{/vendorExtensions.filters}}
	}
}
	{{/vendorExtensions.mustBuildFilterClass}}
	{{/operation}}
{{/operations}}